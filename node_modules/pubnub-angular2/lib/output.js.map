{"version":3,"sources":["output.js"],"names":["Output","channels","channel","message","push","length","key","sort","a","b","clean"],"mappings":";;;;;;;;;;IAAaA,M,WAAAA,M;AACX,oBAAc;AAAA;;AACZ,SAAKC,QAAL,GAAgB,EAAhB;AACD;;;;yBAQIC,O,EAASC,O,EAAS;AACrB,UAAI,KAAKF,QAAL,CAAcC,OAAd,CAAJ,EAA4B;AAC1B,aAAKD,QAAL,CAAcC,OAAd,EAAuBE,IAAvB,CAA4BD,OAA5B;AACD;AACF;;;wBAQGD,O,EAAS;AACX,UAAI,KAAKD,QAAL,CAAcC,OAAd,CAAJ,EAA4B;AAC1B,eAAO,KAAKD,QAAL,CAAcC,OAAd,CAAP;AACD,OAFD,MAEO;AACL,eAAO,IAAP;AACD;AACF;;;0BAOKA,O,EAAS;AACb,UAAI,KAAKD,QAAL,CAAcC,OAAd,CAAJ,EAA4B;AAC1B,aAAKD,QAAL,CAAcC,OAAd,EAAuBG,MAAvB,GAAgC,CAAhC;AACD;AACF;;;8BAOSH,O,EAAS;AACjB,UAAI,CAAC,KAAKD,QAAL,CAAcC,OAAd,CAAL,EAA6B;AAC3B,aAAKD,QAAL,CAAcC,OAAd,IAAyB,EAAzB;AACA,eAAO,IAAP;AACD,OAHD,MAGO;AACL,eAAO,KAAP;AACD;AACF;;;yBAQIA,O,EAASI,G,EAAK;AACjB,UAAI,KAAKL,QAAL,CAAcC,OAAd,CAAJ,EAA4B;AAC1B,aAAKD,QAAL,CAAcC,OAAd,EAAuBK,IAAvB,CAA4B,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACpC,cAAID,EAAEF,GAAF,IAASG,EAAEH,GAAF,CAAb,EAAqB,OAAO,CAAP,CAArB,KACK,IAAIE,EAAEF,GAAF,IAASG,EAAEH,GAAF,CAAb,EAAqB,OAAO,CAAC,CAAR,CAArB,KACA,OAAO,CAAP;AACN,SAJD;AAKD;AACF;;;gCAOWJ,O,EAAS;AACnB,UAAI,KAAKD,QAAL,CAAcC,OAAd,CAAJ,EAA4B;AAC1B,aAAKQ,KAAL,CAAWR,OAAX;AACA,eAAO,KAAKD,QAAL,CAAcC,OAAd,CAAP;AACD;AACF","file":"output.js","sourcesContent":["export class Output {\n  constructor() {\n    this.channels = {};\n  }\n\n  /**\n   * Push a message to a channel's stack or a set of channels' stack\n   *\n   * @param {string|[string]} channel\n   * @param {object} message\n   */\n  push(channel, message) {\n    if (this.channels[channel]) {\n      this.channels[channel].push(message);\n    }\n  }\n\n  /**\n   * Get a stack of messages for a channel or a set of channels\n   *\n   * @param {string|[string]} channel\n   * @returns [object] array\n   */\n  get(channel) {\n    if (this.channels[channel]) {\n      return this.channels[channel];\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Clean a stack of message for a channel or a set of channels\n   *\n   * @param {string|[string]} channel\n   */\n  clean(channel) {\n    if (this.channels[channel]) {\n      this.channels[channel].length = 0;\n    }\n  }\n\n  /**\n   * Subscribe a channel or a set of channels to create a stack of messages\n   *\n   * @param {string|[string]} channel\n   */\n  subscribe(channel) {\n    if (!this.channels[channel]) {\n      this.channels[channel] = [];\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Sort the stack of messages for a channel or set of channels\n   *\n   * @param {string|[string]} channel\n   * @param string key\n   */\n  sort(channel, key) {\n    if (this.channels[channel]) {\n      this.channels[channel].sort((a, b) => {\n        if (a[key] > b[key]) return 1;\n        else if (a[key] < b[key]) return -1;\n        else return 0;\n      });\n    }\n  }\n\n  /**\n   * Unsubscribe a channel or a set of channels of the stack of message\n   *\n   * @param {string|[string]} channel\n   */\n  unsubscribe(channel) {\n    if (this.channels[channel]) {\n      this.clean(channel);\n      delete this.channels[channel];\n    }\n  }\n}\n"]}